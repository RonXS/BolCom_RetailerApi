<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Order;

final class Order
{
    private $orderId;
    private $orderPlacedDateTime;
    private $shipmentDetails;
    private $billingDetails;
    private $orderItems;

    /**
     * @param \BolCom\RetailerApi\Model\Order\OrderId $orderId
     * @param \BolCom\RetailerApi\Model\DateTime $orderPlacedDateTime
     * @param \BolCom\RetailerApi\Model\Order\AddressDetails $shipmentDetails
     * @param \BolCom\RetailerApi\Model\Order\AddressDetails $billingDetails
     * @param \BolCom\RetailerApi\Model\Order\OrderItem[]|null $orderItems
     */
    public function __construct(OrderId $orderId, \BolCom\RetailerApi\Model\DateTime $orderPlacedDateTime, AddressDetails $shipmentDetails, AddressDetails $billingDetails, array $orderItems)
    {
        $this->orderId = $orderId;
        $this->orderPlacedDateTime = $orderPlacedDateTime;
        $this->shipmentDetails = $shipmentDetails;
        $this->billingDetails = $billingDetails;
            $this->orderItems = [];
            foreach ($orderItems as $__value) {
                if (! $__value instanceof \BolCom\RetailerApi\Model\Order\OrderItem) {
                    throw new \InvalidArgumentException('orderItems expected an array of BolCom\RetailerApi\Model\Order\OrderItem');
                }
                $this->orderItems[] = $__value;
            }
    }

    public function orderId(): OrderId
    {
        return $this->orderId;
    }

    public function orderPlacedDateTime(): \BolCom\RetailerApi\Model\DateTime
    {
        return $this->orderPlacedDateTime;
    }

    public function shipmentDetails(): AddressDetails
    {
        return $this->shipmentDetails;
    }

    public function billingDetails(): AddressDetails
    {
        return $this->billingDetails;
    }

    /**
     * @return \BolCom\RetailerApi\Model\Order\OrderItem[]
     */
    public function orderItems(): array
    {
        return $this->orderItems;
    }

    public function withOrderId(OrderId $orderId): Order
    {
        return new self($orderId, $this->orderPlacedDateTime, $this->shipmentDetails, $this->billingDetails, $this->orderItems);
    }

    public function withOrderPlacedDateTime(\BolCom\RetailerApi\Model\DateTime $orderPlacedDateTime): Order
    {
        return new self($this->orderId, $orderPlacedDateTime, $this->shipmentDetails, $this->billingDetails, $this->orderItems);
    }

    public function withShipmentDetails(AddressDetails $shipmentDetails): Order
    {
        return new self($this->orderId, $this->orderPlacedDateTime, $shipmentDetails, $this->billingDetails, $this->orderItems);
    }

    public function withBillingDetails(AddressDetails $billingDetails): Order
    {
        return new self($this->orderId, $this->orderPlacedDateTime, $this->shipmentDetails, $billingDetails, $this->orderItems);
    }

    /**
     * @param \BolCom\RetailerApi\Model\Order\OrderItem[]|null $orderItems
     * @return \BolCom\RetailerApi\Model\Order\Order
     */
    public function withOrderItems(array $orderItems): Order
    {
        return new self($this->orderId, $this->orderPlacedDateTime, $this->shipmentDetails, $this->billingDetails, $orderItems);
    }

    public static function fromArray(array $data): Order
    {
        if (! isset($data['orderId']) || ! \is_string($data['orderId'])) {
            throw new \InvalidArgumentException("Key 'orderId' is missing in data array or is not a string");
        }

        $orderId = OrderId::fromString($data['orderId']);

        if (! isset($data['orderPlacedDateTime']) || ! \is_string($data['orderPlacedDateTime'])) {
            throw new \InvalidArgumentException("Key 'orderPlacedDateTime' is missing in data array or is not a string");
        }

        $orderPlacedDateTime = \BolCom\RetailerApi\Model\DateTime::fromString($data['orderPlacedDateTime']);

        if (! isset($data['shipmentDetails']) || ! \is_array($data['shipmentDetails'])) {
            throw new \InvalidArgumentException("Key 'shipmentDetails' is missing in data array or is not an array");
        }

        $shipmentDetails = AddressDetails::fromArray($data['shipmentDetails']);

        if (! isset($data['billingDetails']) || ! \is_array($data['billingDetails'])) {
            throw new \InvalidArgumentException("Key 'billingDetails' is missing in data array or is not an array");
        }

        $billingDetails = AddressDetails::fromArray($data['billingDetails']);

        if (! isset($data['orderItems']) || ! \is_array($data['orderItems'])) {
            throw new \InvalidArgumentException("Key 'orderItems' is missing in data array or is not an array");
        }

        $orderItems = [];

        foreach ($data['orderItems'] as $__value) {
            if (! \is_array($data['orderItems'])) {
                throw new \InvalidArgumentException("Key 'orderItems' in data array or is not an array of arrays");
            }

            $orderItems[] = OrderItem::fromArray($__value);
        }

        return new self(
            $orderId,
            $orderPlacedDateTime,
            $shipmentDetails,
            $billingDetails,
            $orderItems
        );
    }
}
