<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Order\Command;

final class ShipOrderItems extends \Prooph\Common\Messaging\Query
{
    use \Prooph\Common\Messaging\PayloadTrait;

    const MESSAGE_NAME = 'BolCom\RetailerApi\Model\Order\Command\ShipOrderItems';

    protected $messageName = self::MESSAGE_NAME;

    /**
     * @return \BolCom\RetailerApi\Model\Order\Command\ShipOrderItem[]
     */
    public function orderItems(): array
    {
        $__returnValue = [];

        foreach ($this->payload['orderItems'] as $__value) {
            $__returnValue[] = ShipOrderItem::fromArray($__value);
        }

        return $__returnValue;
    }

    public function shipmentReference()
    {
        return $this->payload['shipmentReference'] ?? null;
    }

    public function shippingLabelId()
    {
        return $this->payload['shippingLabelId'] ?? null;
    }

    public function transport()
    {
        return isset($this->payload['transport']) ? \BolCom\RetailerApi\Model\Transport\TransportInstruction::fromArray($this->payload['transport']) : null;
    }

        /**
     * @param \BolCom\RetailerApi\Model\Order\Command\ShipOrderItem[]|null $orderItems
     * @param string $shipmentReference
     * @param string $shippingLabelId
     * @param \BolCom\RetailerApi\Model\Transport\TransportInstruction $transport
     */
public static function with(array $orderItems, string $shipmentReference = null, string $shippingLabelId = null, \BolCom\RetailerApi\Model\Transport\TransportInstruction $transport = null): ShipOrderItems
    {
        $__array_orderItems = [];

        foreach ($orderItems as $__value) {
            $__array_orderItems[] = $__value->toArray();
        }

        return new self([
            'orderItems' => $__array_orderItems,
            'shipmentReference' => $shipmentReference,
            'shippingLabelId' => $shippingLabelId,
            'transport' => null === $transport ? null : $transport->toArray(),
        ]);
    }

    protected function setPayload(array $payload)
    {
        if (! isset($payload['orderItems']) || ! \is_array($payload['orderItems'])) {
            throw new \InvalidArgumentException("Key 'orderItems' is missing in payload or is not an array");
        }

        foreach ($payload['orderItems'] as $__value) {
            if (! \is_array($__value)) {
                throw new \InvalidArgumentException("Key 'orderItems' is not an array of arrays in payload");
            }
        }

        if (isset($payload['shipmentReference']) && ! \is_string($payload['shipmentReference'])) {
            throw new \InvalidArgumentException("Value for 'shipmentReference' is not a string in payload");
        }

        if (isset($payload['shippingLabelId']) && ! \is_string($payload['shippingLabelId'])) {
            throw new \InvalidArgumentException("Value for 'shippingLabelId' is not a string in payload");
        }

        if (isset($payload['transport']) && ! \is_array($payload['transport'])) {
            throw new \InvalidArgumentException("Value for 'transport' is not an array in payload");
        }

        $this->payload = $payload;
    }
}
