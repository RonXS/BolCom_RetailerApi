<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Rma;

final class ReturnItem
{
    private $rmaId;
    private $orderId;
    private $ean;
    private $title;
    private $expectedQuantity;
    private $returnReason;
    private $returnReasonComments;
    private $customerDetails;
    private $handled;
    private $trackAndTrace;
    private $transporterName;
    private $processingResults;

    /**
     * @param \BolCom\RetailerApi\Model\Rma\RmaId $rmaId
     * @param \BolCom\RetailerApi\Model\Order\OrderId $orderId
     * @param \BolCom\RetailerApi\Model\Offer\Ean $ean
     * @param string $title
     * @param int $expectedQuantity
     * @param string $returnReason
     * @param string $returnReasonComments
     * @param \BolCom\RetailerApi\Model\Customer\CustomerDetails $customerDetails
     * @param bool $handled
     * @param \BolCom\RetailerApi\Model\Transport\TrackAndTrace $trackAndTrace
     * @param string $transporterName
     * @param \BolCom\RetailerApi\Model\Rma\ReturnProcessingResult[] $processingResults
     */
    public function __construct(RmaId $rmaId, \BolCom\RetailerApi\Model\Order\OrderId $orderId, \BolCom\RetailerApi\Model\Offer\Ean $ean, string $title = null, int $expectedQuantity = null, string $returnReason, string $returnReasonComments = null, \BolCom\RetailerApi\Model\Customer\CustomerDetails $customerDetails = null, bool $handled, \BolCom\RetailerApi\Model\Transport\TrackAndTrace $trackAndTrace = null, string $transporterName = null, array $processingResults = null)
    {
        $this->rmaId = $rmaId;
        $this->orderId = $orderId;
        $this->ean = $ean;
        $this->title = $title;
        $this->expectedQuantity = $expectedQuantity;
        $this->returnReason = $returnReason;
        $this->returnReasonComments = $returnReasonComments;
        $this->customerDetails = $customerDetails;
        $this->handled = $handled;
        $this->trackAndTrace = $trackAndTrace;
        $this->transporterName = $transporterName;
        if ($processingResults !== null) {
            $this->processingResults = [];
            foreach ($processingResults as $__value) {
                if (! $__value instanceof \BolCom\RetailerApi\Model\Rma\ReturnProcessingResult) {
                    throw new \InvalidArgumentException('processingResults expected an array of BolCom\RetailerApi\Model\Rma\ReturnProcessingResult');
                }
                $this->processingResults[] = $__value;
            }
        }
    }

    public function rmaId(): RmaId
    {
        return $this->rmaId;
    }

    public function orderId(): \BolCom\RetailerApi\Model\Order\OrderId
    {
        return $this->orderId;
    }

    public function ean(): \BolCom\RetailerApi\Model\Offer\Ean
    {
        return $this->ean;
    }

    public function title()
    {
        return $this->title;
    }

    public function expectedQuantity()
    {
        return $this->expectedQuantity;
    }

    public function returnReason(): string
    {
        return $this->returnReason;
    }

    public function returnReasonComments()
    {
        return $this->returnReasonComments;
    }

    public function customerDetails()
    {
        return $this->customerDetails;
    }

    public function handled(): bool
    {
        return $this->handled;
    }

    public function trackAndTrace()
    {
        return $this->trackAndTrace;
    }

    public function transporterName()
    {
        return $this->transporterName;
    }

    /**
     * @return \BolCom\RetailerApi\Model\Rma\ReturnProcessingResult[]|null
     */
    public function processingResults()
    {
        return $this->processingResults;
    }

    public function withRmaId(RmaId $rmaId): ReturnItem
    {
        return new self($rmaId, $this->orderId, $this->ean, $this->title, $this->expectedQuantity, $this->returnReason, $this->returnReasonComments, $this->customerDetails, $this->handled, $this->trackAndTrace, $this->transporterName, $this->processingResults);
    }

    public function withOrderId(\BolCom\RetailerApi\Model\Order\OrderId $orderId): ReturnItem
    {
        return new self($this->rmaId, $orderId, $this->ean, $this->title, $this->expectedQuantity, $this->returnReason, $this->returnReasonComments, $this->customerDetails, $this->handled, $this->trackAndTrace, $this->transporterName, $this->processingResults);
    }

    public function withEan(\BolCom\RetailerApi\Model\Offer\Ean $ean): ReturnItem
    {
        return new self($this->rmaId, $this->orderId, $ean, $this->title, $this->expectedQuantity, $this->returnReason, $this->returnReasonComments, $this->customerDetails, $this->handled, $this->trackAndTrace, $this->transporterName, $this->processingResults);
    }

    public function withTitle(string $title = null): ReturnItem
    {
        return new self($this->rmaId, $this->orderId, $this->ean, $title, $this->expectedQuantity, $this->returnReason, $this->returnReasonComments, $this->customerDetails, $this->handled, $this->trackAndTrace, $this->transporterName, $this->processingResults);
    }

    public function withExpectedQuantity(int $expectedQuantity = null): ReturnItem
    {
        return new self($this->rmaId, $this->orderId, $this->ean, $this->title, $expectedQuantity, $this->returnReason, $this->returnReasonComments, $this->customerDetails, $this->handled, $this->trackAndTrace, $this->transporterName, $this->processingResults);
    }

    public function withReturnReason(string $returnReason): ReturnItem
    {
        return new self($this->rmaId, $this->orderId, $this->ean, $this->title, $this->expectedQuantity, $returnReason, $this->returnReasonComments, $this->customerDetails, $this->handled, $this->trackAndTrace, $this->transporterName, $this->processingResults);
    }

    public function withReturnReasonComments(string $returnReasonComments = null): ReturnItem
    {
        return new self($this->rmaId, $this->orderId, $this->ean, $this->title, $this->expectedQuantity, $this->returnReason, $returnReasonComments, $this->customerDetails, $this->handled, $this->trackAndTrace, $this->transporterName, $this->processingResults);
    }

    public function withCustomerDetails(\BolCom\RetailerApi\Model\Customer\CustomerDetails $customerDetails = null): ReturnItem
    {
        return new self($this->rmaId, $this->orderId, $this->ean, $this->title, $this->expectedQuantity, $this->returnReason, $this->returnReasonComments, $customerDetails, $this->handled, $this->trackAndTrace, $this->transporterName, $this->processingResults);
    }

    public function withHandled(bool $handled): ReturnItem
    {
        return new self($this->rmaId, $this->orderId, $this->ean, $this->title, $this->expectedQuantity, $this->returnReason, $this->returnReasonComments, $this->customerDetails, $handled, $this->trackAndTrace, $this->transporterName, $this->processingResults);
    }

    public function withTrackAndTrace(\BolCom\RetailerApi\Model\Transport\TrackAndTrace $trackAndTrace = null): ReturnItem
    {
        return new self($this->rmaId, $this->orderId, $this->ean, $this->title, $this->expectedQuantity, $this->returnReason, $this->returnReasonComments, $this->customerDetails, $this->handled, $trackAndTrace, $this->transporterName, $this->processingResults);
    }

    public function withTransporterName(string $transporterName = null): ReturnItem
    {
        return new self($this->rmaId, $this->orderId, $this->ean, $this->title, $this->expectedQuantity, $this->returnReason, $this->returnReasonComments, $this->customerDetails, $this->handled, $this->trackAndTrace, $transporterName, $this->processingResults);
    }

    /**
     * @param \BolCom\RetailerApi\Model\Rma\ReturnProcessingResult[] $processingResults
     * @return \BolCom\RetailerApi\Model\Rma\ReturnItem
     */
    public function withProcessingResults(array $processingResults = null): ReturnItem
    {
        return new self($this->rmaId, $this->orderId, $this->ean, $this->title, $this->expectedQuantity, $this->returnReason, $this->returnReasonComments, $this->customerDetails, $this->handled, $this->trackAndTrace, $this->transporterName, $processingResults);
    }

    public static function fromArray(array $data): ReturnItem
    {
        if (! isset($data['rmaId']) || ! \is_int($data['rmaId'])) {
            throw new \InvalidArgumentException("Key 'rmaId' is missing in data array or is not a int");
        }

        $rmaId = RmaId::fromScalar($data['rmaId']);

        if (! isset($data['orderId']) || ! \is_string($data['orderId'])) {
            throw new \InvalidArgumentException("Key 'orderId' is missing in data array or is not a string");
        }

        $orderId = \BolCom\RetailerApi\Model\Order\OrderId::fromString($data['orderId']);

        if (! isset($data['ean']) || ! \is_string($data['ean'])) {
            throw new \InvalidArgumentException("Key 'ean' is missing in data array or is not a string");
        }

        $ean = \BolCom\RetailerApi\Model\Offer\Ean::fromString($data['ean']);

        if (isset($data['title'])) {
            if (! \is_string($data['title'])) {
                throw new \InvalidArgumentException("Value for 'title' is not a string in data array");
            }

            $title = $data['title'];
        } else {
            $title = null;
        }

        if (isset($data['expectedQuantity'])) {
            if (! \is_int($data['expectedQuantity'])) {
                throw new \InvalidArgumentException("Value for 'expectedQuantity' is not a int in data array");
            }

            $expectedQuantity = $data['expectedQuantity'];
        } else {
            $expectedQuantity = null;
        }

        if (! isset($data['returnReason']) || ! \is_string($data['returnReason'])) {
            throw new \InvalidArgumentException("Key 'returnReason' is missing in data array or is not a string");
        }

        $returnReason = $data['returnReason'];

        if (isset($data['returnReasonComments'])) {
            if (! \is_string($data['returnReasonComments'])) {
                throw new \InvalidArgumentException("Value for 'returnReasonComments' is not a string in data array");
            }

            $returnReasonComments = $data['returnReasonComments'];
        } else {
            $returnReasonComments = null;
        }

        if (isset($data['customerDetails'])) {
            if (! \is_array($data['customerDetails'])) {
                throw new \InvalidArgumentException("Value for 'customerDetails' is not an array in data array");
            }

            $customerDetails = \BolCom\RetailerApi\Model\Customer\CustomerDetails::fromArray($data['customerDetails']);
        } else {
            $customerDetails = null;
        }

        if (! isset($data['handled']) || ! \is_bool($data['handled'])) {
            throw new \InvalidArgumentException("Key 'handled' is missing in data array or is not a bool");
        }

        $handled = $data['handled'];

        if (isset($data['trackAndTrace'])) {
            if (! \is_string($data['trackAndTrace'])) {
                throw new \InvalidArgumentException("Value for 'trackAndTrace' is not a string in data array");
            }

            $trackAndTrace = \BolCom\RetailerApi\Model\Transport\TrackAndTrace::fromScalar($data['trackAndTrace']);
        } else {
            $trackAndTrace = null;
        }

        if (isset($data['transporterName'])) {
            if (! \is_string($data['transporterName'])) {
                throw new \InvalidArgumentException("Value for 'transporterName' is not a string in data array");
            }

            $transporterName = $data['transporterName'];
        } else {
            $transporterName = null;
        }

        if (isset($data['processingResults'])) {
            if (! \is_array($data['processingResults'])) {
                throw new \InvalidArgumentException("Value for 'processingResults' is not an array in data array");
            }

            $processingResults = [];

            foreach ($data['processingResults'] as $__value) {
                if (! \is_array($data['processingResults'])) {
                    throw new \InvalidArgumentException("Key 'processingResults' in data array or is not an array of arrays");
                }

                $processingResults[] = ReturnProcessingResult::fromArray($__value);
            }
        } else {
            $processingResults = null;
        }

        return new self(
            $rmaId,
            $orderId,
            $ean,
            $title,
            $expectedQuantity,
            $returnReason,
            $returnReasonComments,
            $customerDetails,
            $handled,
            $trackAndTrace,
            $transporterName,
            $processingResults
        );
    }
}
