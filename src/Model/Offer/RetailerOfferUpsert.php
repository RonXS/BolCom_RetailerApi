<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Offer;

final class RetailerOfferUpsert
{
    private $ean;
    private $condition;
    private $reference;
    private $onHoldByRetailer;
    private $unknownProductTitle;
    private $pricing;
    private $stock;
    private $fulfilment;

    public function __construct(Ean $ean, OfferCondition $condition, Reference $reference = null, bool $onHoldByRetailer, Title $unknownProductTitle = null, Pricing $pricing, Stock $stock, Fulfilment $fulfilment)
    {
        $this->ean = $ean;
        $this->condition = $condition;
        $this->reference = $reference;
        $this->onHoldByRetailer = $onHoldByRetailer;
        $this->unknownProductTitle = $unknownProductTitle;
        $this->pricing = $pricing;
        $this->stock = $stock;
        $this->fulfilment = $fulfilment;
    }

    public function ean(): Ean
    {
        return $this->ean;
    }

    public function condition(): OfferCondition
    {
        return $this->condition;
    }

    public function reference()
    {
        return $this->reference;
    }

    public function onHoldByRetailer(): bool
    {
        return $this->onHoldByRetailer;
    }

    public function unknownProductTitle()
    {
        return $this->unknownProductTitle;
    }

    public function pricing(): Pricing
    {
        return $this->pricing;
    }

    public function stock(): Stock
    {
        return $this->stock;
    }

    public function fulfilment(): Fulfilment
    {
        return $this->fulfilment;
    }

    public function withEan(Ean $ean): RetailerOfferUpsert
    {
        return new self($ean, $this->condition, $this->reference, $this->onHoldByRetailer, $this->unknownProductTitle, $this->pricing, $this->stock, $this->fulfilment);
    }

    public function withCondition(OfferCondition $condition): RetailerOfferUpsert
    {
        return new self($this->ean, $condition, $this->reference, $this->onHoldByRetailer, $this->unknownProductTitle, $this->pricing, $this->stock, $this->fulfilment);
    }

    public function withReference(Reference $reference = null): RetailerOfferUpsert
    {
        return new self($this->ean, $this->condition, $reference, $this->onHoldByRetailer, $this->unknownProductTitle, $this->pricing, $this->stock, $this->fulfilment);
    }

    public function withOnHoldByRetailer(bool $onHoldByRetailer): RetailerOfferUpsert
    {
        return new self($this->ean, $this->condition, $this->reference, $onHoldByRetailer, $this->unknownProductTitle, $this->pricing, $this->stock, $this->fulfilment);
    }

    public function withUnknownProductTitle(Title $unknownProductTitle = null): RetailerOfferUpsert
    {
        return new self($this->ean, $this->condition, $this->reference, $this->onHoldByRetailer, $unknownProductTitle, $this->pricing, $this->stock, $this->fulfilment);
    }

    public function withPricing(Pricing $pricing): RetailerOfferUpsert
    {
        return new self($this->ean, $this->condition, $this->reference, $this->onHoldByRetailer, $this->unknownProductTitle, $pricing, $this->stock, $this->fulfilment);
    }

    public function withStock(Stock $stock): RetailerOfferUpsert
    {
        return new self($this->ean, $this->condition, $this->reference, $this->onHoldByRetailer, $this->unknownProductTitle, $this->pricing, $stock, $this->fulfilment);
    }

    public function withFulfilment(Fulfilment $fulfilment): RetailerOfferUpsert
    {
        return new self($this->ean, $this->condition, $this->reference, $this->onHoldByRetailer, $this->unknownProductTitle, $this->pricing, $this->stock, $fulfilment);
    }

    public static function fromArray(array $data): RetailerOfferUpsert
    {
        if (! isset($data['ean']) || ! \is_string($data['ean'])) {
            throw new \InvalidArgumentException("Key 'ean' is missing in data array or is not a string");
        }

        $ean = Ean::fromString($data['ean']);

        if (! isset($data['condition']) || ! \is_array($data['condition'])) {
            throw new \InvalidArgumentException("Key 'condition' is missing in data array or is not an array");
        }

        $condition = OfferCondition::fromArray($data['condition']);

        if (isset($data['reference'])) {
            if (! \is_string($data['reference'])) {
                throw new \InvalidArgumentException("Value for 'reference' is not a string in data array");
            }

            $reference = Reference::fromString($data['reference']);
        } else {
            $reference = null;
        }

        if (! isset($data['onHoldByRetailer']) || ! \is_bool($data['onHoldByRetailer'])) {
            throw new \InvalidArgumentException("Key 'onHoldByRetailer' is missing in data array or is not a bool");
        }

        $onHoldByRetailer = $data['onHoldByRetailer'];

        if (isset($data['unknownProductTitle'])) {
            if (! \is_string($data['unknownProductTitle'])) {
                throw new \InvalidArgumentException("Value for 'unknownProductTitle' is not a string in data array");
            }

            $unknownProductTitle = Title::fromString($data['unknownProductTitle']);
        } else {
            $unknownProductTitle = null;
        }

        if (! isset($data['pricing']) || ! \is_array($data['pricing'])) {
            throw new \InvalidArgumentException("Key 'pricing' is missing in data array or is not an array");
        }

        $pricing = Pricing::fromArray($data['pricing']);

        if (! isset($data['stock']) || ! \is_array($data['stock'])) {
            throw new \InvalidArgumentException("Key 'stock' is missing in data array or is not an array");
        }

        $stock = Stock::fromArray($data['stock']);

        if (! isset($data['fulfilment']) || ! \is_array($data['fulfilment'])) {
            throw new \InvalidArgumentException("Key 'fulfilment' is missing in data array or is not an array");
        }

        $fulfilment = Fulfilment::fromArray($data['fulfilment']);

        return new self(
            $ean,
            $condition,
            $reference,
            $onHoldByRetailer,
            $unknownProductTitle,
            $pricing,
            $stock,
            $fulfilment
        );
    }

    public function toArray(): array
    {
        return [
            'ean' => $this->ean->toString(),
            'condition' => $this->condition->toArray(),
            'reference' => null === $this->reference ? null : $this->reference->toString(),
            'onHoldByRetailer' => $this->onHoldByRetailer,
            'unknownProductTitle' => null === $this->unknownProductTitle ? null : $this->unknownProductTitle->toString(),
            'pricing' => $this->pricing->toArray(),
            'stock' => $this->stock->toArray(),
            'fulfilment' => $this->fulfilment->toArray(),
        ];
    }
}
