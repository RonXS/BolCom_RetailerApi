<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Customer;

final class CustomerDetails
{
    private $salutation;
    private $firstName;
    private $surname;
    private $streetName;
    private $houseNumber;
    private $houseNumberExtention;
    private $extraAddressInformation;
    private $zipCode;
    private $city;
    private $countryCode;
    private $email;
    private $company;
    private $kvkNumber;
    private $deliveryPhoneNumber;

    public function __construct(string $salutation = null, string $firstName = null, string $surname = null, string $streetName = null, string $houseNumber = null, string $houseNumberExtention = null, string $extraAddressInformation = null, string $zipCode, string $city = null, string $countryCode, string $email = null, string $company = null, string $kvkNumber = null, string $deliveryPhoneNumber = null)
    {
        $this->salutation = $salutation;
        $this->firstName = $firstName;
        $this->surname = $surname;
        $this->streetName = $streetName;
        $this->houseNumber = $houseNumber;
        $this->houseNumberExtention = $houseNumberExtention;
        $this->extraAddressInformation = $extraAddressInformation;
        $this->zipCode = $zipCode;
        $this->city = $city;
        $this->countryCode = $countryCode;
        $this->email = $email;
        $this->company = $company;
        $this->kvkNumber = $kvkNumber;
        $this->deliveryPhoneNumber = $deliveryPhoneNumber;
    }

    public function salutation()
    {
        return $this->salutation;
    }

    public function firstName()
    {
        return $this->firstName;
    }

    public function surname()
    {
        return $this->surname;
    }

    public function streetName()
    {
        return $this->streetName;
    }

    public function houseNumber()
    {
        return $this->houseNumber;
    }

    public function houseNumberExtention()
    {
        return $this->houseNumberExtention;
    }

    public function extraAddressInformation()
    {
        return $this->extraAddressInformation;
    }

    public function zipCode(): string
    {
        return $this->zipCode;
    }

    public function city()
    {
        return $this->city;
    }

    public function countryCode(): string
    {
        return $this->countryCode;
    }

    public function email()
    {
        return $this->email;
    }

    public function company()
    {
        return $this->company;
    }

    public function kvkNumber()
    {
        return $this->kvkNumber;
    }

    public function deliveryPhoneNumber()
    {
        return $this->deliveryPhoneNumber;
    }

    public function withSalutation(string $salutation = null): CustomerDetails
    {
        return new self($salutation, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtention, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->kvkNumber, $this->deliveryPhoneNumber);
    }

    public function withFirstName(string $firstName = null): CustomerDetails
    {
        return new self($this->salutation, $firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtention, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->kvkNumber, $this->deliveryPhoneNumber);
    }

    public function withSurname(string $surname = null): CustomerDetails
    {
        return new self($this->salutation, $this->firstName, $surname, $this->streetName, $this->houseNumber, $this->houseNumberExtention, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->kvkNumber, $this->deliveryPhoneNumber);
    }

    public function withStreetName(string $streetName = null): CustomerDetails
    {
        return new self($this->salutation, $this->firstName, $this->surname, $streetName, $this->houseNumber, $this->houseNumberExtention, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->kvkNumber, $this->deliveryPhoneNumber);
    }

    public function withHouseNumber(string $houseNumber = null): CustomerDetails
    {
        return new self($this->salutation, $this->firstName, $this->surname, $this->streetName, $houseNumber, $this->houseNumberExtention, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->kvkNumber, $this->deliveryPhoneNumber);
    }

    public function withHouseNumberExtention(string $houseNumberExtention = null): CustomerDetails
    {
        return new self($this->salutation, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $houseNumberExtention, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->kvkNumber, $this->deliveryPhoneNumber);
    }

    public function withExtraAddressInformation(string $extraAddressInformation = null): CustomerDetails
    {
        return new self($this->salutation, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtention, $extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->kvkNumber, $this->deliveryPhoneNumber);
    }

    public function withZipCode(string $zipCode): CustomerDetails
    {
        return new self($this->salutation, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtention, $this->extraAddressInformation, $zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->kvkNumber, $this->deliveryPhoneNumber);
    }

    public function withCity(string $city = null): CustomerDetails
    {
        return new self($this->salutation, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtention, $this->extraAddressInformation, $this->zipCode, $city, $this->countryCode, $this->email, $this->company, $this->kvkNumber, $this->deliveryPhoneNumber);
    }

    public function withCountryCode(string $countryCode): CustomerDetails
    {
        return new self($this->salutation, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtention, $this->extraAddressInformation, $this->zipCode, $this->city, $countryCode, $this->email, $this->company, $this->kvkNumber, $this->deliveryPhoneNumber);
    }

    public function withEmail(string $email = null): CustomerDetails
    {
        return new self($this->salutation, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtention, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $email, $this->company, $this->kvkNumber, $this->deliveryPhoneNumber);
    }

    public function withCompany(string $company = null): CustomerDetails
    {
        return new self($this->salutation, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtention, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $company, $this->kvkNumber, $this->deliveryPhoneNumber);
    }

    public function withKvkNumber(string $kvkNumber = null): CustomerDetails
    {
        return new self($this->salutation, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtention, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $kvkNumber, $this->deliveryPhoneNumber);
    }

    public function withDeliveryPhoneNumber(string $deliveryPhoneNumber = null): CustomerDetails
    {
        return new self($this->salutation, $this->firstName, $this->surname, $this->streetName, $this->houseNumber, $this->houseNumberExtention, $this->extraAddressInformation, $this->zipCode, $this->city, $this->countryCode, $this->email, $this->company, $this->kvkNumber, $deliveryPhoneNumber);
    }

    public static function fromArray(array $data): CustomerDetails
    {
        if (isset($data['salutation'])) {
            if (! \is_string($data['salutation'])) {
                throw new \InvalidArgumentException("Value for 'salutation' is not a string in data array");
            }

            $salutation = $data['salutation'];
        } else {
            $salutation = null;
        }

        if (isset($data['firstName'])) {
            if (! \is_string($data['firstName'])) {
                throw new \InvalidArgumentException("Value for 'firstName' is not a string in data array");
            }

            $firstName = $data['firstName'];
        } else {
            $firstName = null;
        }

        if (isset($data['surname'])) {
            if (! \is_string($data['surname'])) {
                throw new \InvalidArgumentException("Value for 'surname' is not a string in data array");
            }

            $surname = $data['surname'];
        } else {
            $surname = null;
        }

        if (isset($data['streetName'])) {
            if (! \is_string($data['streetName'])) {
                throw new \InvalidArgumentException("Value for 'streetName' is not a string in data array");
            }

            $streetName = $data['streetName'];
        } else {
            $streetName = null;
        }

        if (isset($data['houseNumber'])) {
            if (! \is_string($data['houseNumber'])) {
                throw new \InvalidArgumentException("Value for 'houseNumber' is not a string in data array");
            }

            $houseNumber = $data['houseNumber'];
        } else {
            $houseNumber = null;
        }

        if (isset($data['houseNumberExtention'])) {
            if (! \is_string($data['houseNumberExtention'])) {
                throw new \InvalidArgumentException("Value for 'houseNumberExtention' is not a string in data array");
            }

            $houseNumberExtention = $data['houseNumberExtention'];
        } else {
            $houseNumberExtention = null;
        }

        if (isset($data['extraAddressInformation'])) {
            if (! \is_string($data['extraAddressInformation'])) {
                throw new \InvalidArgumentException("Value for 'extraAddressInformation' is not a string in data array");
            }

            $extraAddressInformation = $data['extraAddressInformation'];
        } else {
            $extraAddressInformation = null;
        }

        if (! isset($data['zipCode']) || ! \is_string($data['zipCode'])) {
            throw new \InvalidArgumentException("Key 'zipCode' is missing in data array or is not a string");
        }

        $zipCode = $data['zipCode'];

        if (isset($data['city'])) {
            if (! \is_string($data['city'])) {
                throw new \InvalidArgumentException("Value for 'city' is not a string in data array");
            }

            $city = $data['city'];
        } else {
            $city = null;
        }

        if (! isset($data['countryCode']) || ! \is_string($data['countryCode'])) {
            throw new \InvalidArgumentException("Key 'countryCode' is missing in data array or is not a string");
        }

        $countryCode = $data['countryCode'];

        if (isset($data['email'])) {
            if (! \is_string($data['email'])) {
                throw new \InvalidArgumentException("Value for 'email' is not a string in data array");
            }

            $email = $data['email'];
        } else {
            $email = null;
        }

        if (isset($data['company'])) {
            if (! \is_string($data['company'])) {
                throw new \InvalidArgumentException("Value for 'company' is not a string in data array");
            }

            $company = $data['company'];
        } else {
            $company = null;
        }

        if (isset($data['kvkNumber'])) {
            if (! \is_string($data['kvkNumber'])) {
                throw new \InvalidArgumentException("Value for 'kvkNumber' is not a string in data array");
            }

            $kvkNumber = $data['kvkNumber'];
        } else {
            $kvkNumber = null;
        }

        if (isset($data['deliveryPhoneNumber'])) {
            if (! \is_string($data['deliveryPhoneNumber'])) {
                throw new \InvalidArgumentException("Value for 'deliveryPhoneNumber' is not a string in data array");
            }

            $deliveryPhoneNumber = $data['deliveryPhoneNumber'];
        } else {
            $deliveryPhoneNumber = null;
        }

        return new self(
            $salutation,
            $firstName,
            $surname,
            $streetName,
            $houseNumber,
            $houseNumberExtention,
            $extraAddressInformation,
            $zipCode,
            $city,
            $countryCode,
            $email,
            $company,
            $kvkNumber,
            $deliveryPhoneNumber
        );
    }
}
