<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Shipment;

final class ShipmentItem
{
    private $orderItemId;
    private $order;
    private $offer;
    private $product;
    private $quantity;
    private $unitPrice;
    private $commission;
    private $fulfilment;
    private $selectedDeliveryWindow;

    public function __construct(\BolCom\RetailerApi\Model\Order\OrderItemId $orderItemId, ShipmentOrder $order = null, Offer $offer, Product $product, \BolCom\RetailerApi\Model\Order\Quantity $quantity, \BolCom\RetailerApi\Model\CurrencyAmount $unitPrice, \BolCom\RetailerApi\Model\CurrencyAmount $commission, ShipmentFulfilmemt $fulfilment, \BolCom\RetailerApi\Model\Order\SelectedDeliveryWindow $selectedDeliveryWindow = null)
    {
        $this->orderItemId = $orderItemId;
        $this->order = $order;
        $this->offer = $offer;
        $this->product = $product;
        $this->quantity = $quantity;
        $this->unitPrice = $unitPrice;
        $this->commission = $commission;
        $this->fulfilment = $fulfilment;
        $this->selectedDeliveryWindow = $selectedDeliveryWindow;
    }

    public function orderItemId(): \BolCom\RetailerApi\Model\Order\OrderItemId
    {
        return $this->orderItemId;
    }

    public function order()
    {
        return $this->order;
    }

    public function offer(): Offer
    {
        return $this->offer;
    }

    public function product(): Product
    {
        return $this->product;
    }

    public function quantity(): \BolCom\RetailerApi\Model\Order\Quantity
    {
        return $this->quantity;
    }

    public function unitPrice(): \BolCom\RetailerApi\Model\CurrencyAmount
    {
        return $this->unitPrice;
    }

    public function commission(): \BolCom\RetailerApi\Model\CurrencyAmount
    {
        return $this->commission;
    }

    public function fulfilment(): ShipmentFulfilmemt
    {
        return $this->fulfilment;
    }

    public function selectedDeliveryWindow()
    {
        return $this->selectedDeliveryWindow;
    }

    public function withOrderItemId(\BolCom\RetailerApi\Model\Order\OrderItemId $orderItemId): ShipmentItem
    {
        return new self($orderItemId, $this->order, $this->offer, $this->product, $this->quantity, $this->unitPrice, $this->commission, $this->fulfilment, $this->selectedDeliveryWindow);
    }

    public function withOrder(ShipmentOrder $order = null): ShipmentItem
    {
        return new self($this->orderItemId, $order, $this->offer, $this->product, $this->quantity, $this->unitPrice, $this->commission, $this->fulfilment, $this->selectedDeliveryWindow);
    }

    public function withOffer(Offer $offer): ShipmentItem
    {
        return new self($this->orderItemId, $this->order, $offer, $this->product, $this->quantity, $this->unitPrice, $this->commission, $this->fulfilment, $this->selectedDeliveryWindow);
    }

    public function withProduct(Product $product): ShipmentItem
    {
        return new self($this->orderItemId, $this->order, $this->offer, $product, $this->quantity, $this->unitPrice, $this->commission, $this->fulfilment, $this->selectedDeliveryWindow);
    }

    public function withQuantity(\BolCom\RetailerApi\Model\Order\Quantity $quantity): ShipmentItem
    {
        return new self($this->orderItemId, $this->order, $this->offer, $this->product, $quantity, $this->unitPrice, $this->commission, $this->fulfilment, $this->selectedDeliveryWindow);
    }

    public function withUnitPrice(\BolCom\RetailerApi\Model\CurrencyAmount $unitPrice): ShipmentItem
    {
        return new self($this->orderItemId, $this->order, $this->offer, $this->product, $this->quantity, $unitPrice, $this->commission, $this->fulfilment, $this->selectedDeliveryWindow);
    }

    public function withCommission(\BolCom\RetailerApi\Model\CurrencyAmount $commission): ShipmentItem
    {
        return new self($this->orderItemId, $this->order, $this->offer, $this->product, $this->quantity, $this->unitPrice, $commission, $this->fulfilment, $this->selectedDeliveryWindow);
    }

    public function withFulfilment(ShipmentFulfilmemt $fulfilment): ShipmentItem
    {
        return new self($this->orderItemId, $this->order, $this->offer, $this->product, $this->quantity, $this->unitPrice, $this->commission, $fulfilment, $this->selectedDeliveryWindow);
    }

    public function withSelectedDeliveryWindow(\BolCom\RetailerApi\Model\Order\SelectedDeliveryWindow $selectedDeliveryWindow = null): ShipmentItem
    {
        return new self($this->orderItemId, $this->order, $this->offer, $this->product, $this->quantity, $this->unitPrice, $this->commission, $this->fulfilment, $selectedDeliveryWindow);
    }

    public static function fromArray(array $data): ShipmentItem
    {
        if (! isset($data['orderItemId']) || ! \is_string($data['orderItemId'])) {
            throw new \InvalidArgumentException("Key 'orderItemId' is missing in data array or is not a string");
        }

        $orderItemId = \BolCom\RetailerApi\Model\Order\OrderItemId::fromString($data['orderItemId']);

        if (isset($data['order'])) {
            if (! \is_array($data['order'])) {
                throw new \InvalidArgumentException("Value for 'order' is not an array in data array");
            }

            $order = ShipmentOrder::fromArray($data['order']);
        } else {
            $order = null;
        }

        if (! isset($data['offer']) || ! \is_array($data['offer'])) {
            throw new \InvalidArgumentException("Key 'offer' is missing in data array or is not an array");
        }

        $offer = Offer::fromArray($data['offer']);

        if (! isset($data['product']) || ! \is_array($data['product'])) {
            throw new \InvalidArgumentException("Key 'product' is missing in data array or is not an array");
        }

        $product = Product::fromArray($data['product']);

        if (! isset($data['quantity']) || ! \is_int($data['quantity'])) {
            throw new \InvalidArgumentException("Key 'quantity' is missing in data array or is not a int");
        }

        $quantity = \BolCom\RetailerApi\Model\Order\Quantity::fromScalar($data['quantity']);

        if (! isset($data['unitPrice']) || (! \is_float($data['unitPrice']) && ! \is_int($data['unitPrice']))) {
            throw new \InvalidArgumentException("Key 'unitPrice' is missing in data array or is not a float");
        }

        $unitPrice = \BolCom\RetailerApi\Model\CurrencyAmount::fromScalar($data['unitPrice']);

        if (! isset($data['commission']) || (! \is_float($data['commission']) && ! \is_int($data['commission']))) {
            throw new \InvalidArgumentException("Key 'commission' is missing in data array or is not a float");
        }

        $commission = \BolCom\RetailerApi\Model\CurrencyAmount::fromScalar($data['commission']);

        if (! isset($data['fulfilment']) || ! \is_array($data['fulfilment'])) {
            throw new \InvalidArgumentException("Key 'fulfilment' is missing in data array or is not an array");
        }

        $fulfilment = ShipmentFulfilmemt::fromArray($data['fulfilment']);

        if (isset($data['selectedDeliveryWindow'])) {
            if (! \is_array($data['selectedDeliveryWindow'])) {
                throw new \InvalidArgumentException("Value for 'selectedDeliveryWindow' is not an array in data array");
            }

            $selectedDeliveryWindow = \BolCom\RetailerApi\Model\Order\SelectedDeliveryWindow::fromArray($data['selectedDeliveryWindow']);
        } else {
            $selectedDeliveryWindow = null;
        }

        return new self(
            $orderItemId,
            $order,
            $offer,
            $product,
            $quantity,
            $unitPrice,
            $commission,
            $fulfilment,
            $selectedDeliveryWindow
        );
    }
}
