<?php

// phpcs:ignoreFile
// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace BolCom\RetailerApi\Model\Shipment;

final class Shipment
{
    private $shipmentId;
    private $shipmentDateTime;
    private $shipmentReference;
    private $order;
    private $shipmentItems;
    private $transport;
    private $shipmentDetails;
    private $billingDetails;

    /**
     * @param \BolCom\RetailerApi\Model\Shipment\ShipmentId $shipmentId
     * @param \BolCom\RetailerApi\Model\DateTime $shipmentDateTime
     * @param string $shipmentReference
     * @param \BolCom\RetailerApi\Model\Shipment\ShipmentOrder $order
     * @param \BolCom\RetailerApi\Model\Shipment\ShipmentItem[]|null $shipmentItems
     * @param \BolCom\RetailerApi\Model\Transport\Transport $transport
     * @param \BolCom\RetailerApi\Model\Shipment\AddressDetails $shipmentDetails
     * @param \BolCom\RetailerApi\Model\Shipment\AddressDetails $billingDetails
     */
    public function __construct(ShipmentId $shipmentId, \BolCom\RetailerApi\Model\DateTime $shipmentDateTime, string $shipmentReference = null, ShipmentOrder $order, array $shipmentItems, \BolCom\RetailerApi\Model\Transport\Transport $transport = null, AddressDetails $shipmentDetails = null, AddressDetails $billingDetails = null)
    {
        $this->shipmentId = $shipmentId;
        $this->shipmentDateTime = $shipmentDateTime;
        $this->shipmentReference = $shipmentReference;
        $this->order = $order;
            $this->shipmentItems = [];
            foreach ($shipmentItems as $__value) {
                if (! $__value instanceof \BolCom\RetailerApi\Model\Shipment\ShipmentItem) {
                    throw new \InvalidArgumentException('shipmentItems expected an array of BolCom\RetailerApi\Model\Shipment\ShipmentItem');
                }
                $this->shipmentItems[] = $__value;
            }

        $this->transport = $transport;
        $this->shipmentDetails = $shipmentDetails;
        $this->billingDetails = $billingDetails;
    }

    public function shipmentId(): ShipmentId
    {
        return $this->shipmentId;
    }

    public function shipmentDateTime(): \BolCom\RetailerApi\Model\DateTime
    {
        return $this->shipmentDateTime;
    }

    public function shipmentReference()
    {
        return $this->shipmentReference;
    }

    public function order(): ShipmentOrder
    {
        return $this->order;
    }

    /**
     * @return \BolCom\RetailerApi\Model\Shipment\ShipmentItem[]
     */
    public function shipmentItems(): array
    {
        return $this->shipmentItems;
    }

    public function transport()
    {
        return $this->transport;
    }

    public function shipmentDetails()
    {
        return $this->shipmentDetails;
    }

    public function billingDetails()
    {
        return $this->billingDetails;
    }

    public function withShipmentId(ShipmentId $shipmentId): Shipment
    {
        return new self($shipmentId, $this->shipmentDateTime, $this->shipmentReference, $this->order, $this->shipmentItems, $this->transport, $this->shipmentDetails, $this->billingDetails);
    }

    public function withShipmentDateTime(\BolCom\RetailerApi\Model\DateTime $shipmentDateTime): Shipment
    {
        return new self($this->shipmentId, $shipmentDateTime, $this->shipmentReference, $this->order, $this->shipmentItems, $this->transport, $this->shipmentDetails, $this->billingDetails);
    }

    public function withShipmentReference(string $shipmentReference = null): Shipment
    {
        return new self($this->shipmentId, $this->shipmentDateTime, $shipmentReference, $this->order, $this->shipmentItems, $this->transport, $this->shipmentDetails, $this->billingDetails);
    }

    public function withOrder(ShipmentOrder $order): Shipment
    {
        return new self($this->shipmentId, $this->shipmentDateTime, $this->shipmentReference, $order, $this->shipmentItems, $this->transport, $this->shipmentDetails, $this->billingDetails);
    }

    /**
     * @param \BolCom\RetailerApi\Model\Shipment\ShipmentItem[]|null $shipmentItems
     * @return \BolCom\RetailerApi\Model\Shipment\Shipment
     */
    public function withShipmentItems(array $shipmentItems): Shipment
    {
        return new self($this->shipmentId, $this->shipmentDateTime, $this->shipmentReference, $this->order, $shipmentItems, $this->transport, $this->shipmentDetails, $this->billingDetails);
    }

    public function withTransport(\BolCom\RetailerApi\Model\Transport\Transport $transport = null): Shipment
    {
        return new self($this->shipmentId, $this->shipmentDateTime, $this->shipmentReference, $this->order, $this->shipmentItems, $transport, $this->shipmentDetails, $this->billingDetails);
    }

    public function withShipmentDetails(AddressDetails $shipmentDetails = null): Shipment
    {
        return new self($this->shipmentId, $this->shipmentDateTime, $this->shipmentReference, $this->order, $this->shipmentItems, $this->transport, $shipmentDetails, $this->billingDetails);
    }

    public function withBillingDetails(AddressDetails $billingDetails = null): Shipment
    {
        return new self($this->shipmentId, $this->shipmentDateTime, $this->shipmentReference, $this->order, $this->shipmentItems, $this->transport, $this->shipmentDetails, $billingDetails);
    }

    public static function fromArray(array $data): Shipment
    {
        if (! isset($data['shipmentId']) || ! \is_string($data['shipmentId'])) {
            throw new \InvalidArgumentException("Key 'shipmentId' is missing in data array or is not a string");
        }

        $shipmentId = ShipmentId::fromScalar($data['shipmentId']);

        if (! isset($data['shipmentDateTime']) || ! \is_string($data['shipmentDateTime'])) {
            throw new \InvalidArgumentException("Key 'shipmentDateTime' is missing in data array or is not a string");
        }

        $shipmentDateTime = \BolCom\RetailerApi\Model\DateTime::fromString($data['shipmentDateTime']);

        if (isset($data['shipmentReference'])) {
            if (! \is_string($data['shipmentReference'])) {
                throw new \InvalidArgumentException("Value for 'shipmentReference' is not a string in data array");
            }

            $shipmentReference = $data['shipmentReference'];
        } else {
            $shipmentReference = null;
        }

        if (! isset($data['order']) || ! \is_array($data['order'])) {
            throw new \InvalidArgumentException("Key 'order' is missing in data array or is not an array");
        }

        $order = ShipmentOrder::fromArray($data['order']);

        if (! isset($data['shipmentItems']) || ! \is_array($data['shipmentItems'])) {
            throw new \InvalidArgumentException("Key 'shipmentItems' is missing in data array or is not an array");
        }

        $shipmentItems = [];

        foreach ($data['shipmentItems'] as $__value) {
            if (! \is_array($data['shipmentItems'])) {
                throw new \InvalidArgumentException("Key 'shipmentItems' in data array or is not an array of arrays");
            }

            $shipmentItems[] = ShipmentItem::fromArray($__value);
        }

        if (isset($data['transport'])) {
            if (! \is_array($data['transport'])) {
                throw new \InvalidArgumentException("Value for 'transport' is not an array in data array");
            }

            $transport = \BolCom\RetailerApi\Model\Transport\Transport::fromArray($data['transport']);
        } else {
            $transport = null;
        }

        if (isset($data['shipmentDetails'])) {
            if (! \is_array($data['shipmentDetails'])) {
                throw new \InvalidArgumentException("Value for 'shipmentDetails' is not an array in data array");
            }

            $shipmentDetails = AddressDetails::fromArray($data['shipmentDetails']);
        } else {
            $shipmentDetails = null;
        }

        if (isset($data['billingDetails'])) {
            if (! \is_array($data['billingDetails'])) {
                throw new \InvalidArgumentException("Value for 'billingDetails' is not an array in data array");
            }

            $billingDetails = AddressDetails::fromArray($data['billingDetails']);
        } else {
            $billingDetails = null;
        }

        return new self(
            $shipmentId,
            $shipmentDateTime,
            $shipmentReference,
            $order,
            $shipmentItems,
            $transport,
            $shipmentDetails,
            $billingDetails
        );
    }
}
